; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes='require<profile-summary>,function(codegenprepare)' -mtriple=riscv32 %s \
; RUN:   | FileCheck --check-prefixes=LE %s
; RUN: opt -S -passes='require<profile-summary>,function(codegenprepare)' -mtriple=riscv32 -data-layout="E-m:e-p:32:32-i64:64-n32-S128" %s \
; RUN:   | FileCheck --check-prefixes=BE %s


define void @foo-i32(ptr align 4 %p, i32 %v) {
; LE-LABEL: @foo-i32(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = trunc i32 [[V:%.*]] to i8
; LE-NEXT:    store i8 [[TMP0]], ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = lshr i32 [[V]], 8
; LE-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP3:%.*]] = trunc i32 [[TMP1]] to i24
; LE-NEXT:    store i24 [[TMP3]], ptr [[TMP2]], align 4
; LE-NEXT:    ret void
;
; BE-LABEL: @foo-i32(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = lshr i32 [[V:%.*]], 24
; BE-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i8
; BE-NEXT:    store i8 [[TMP1]], ptr [[LEN]], align 1
; BE-NEXT:    [[TMP2:%.*]] = shl i32 [[V]], 8
; BE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP4:%.*]] = lshr i32 [[TMP2]], 8
; BE-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP4]] to i24
; BE-NEXT:    store i24 [[TMP5]], ptr [[TMP3]], align 4
; BE-NEXT:    ret void
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  store i32 %v, ptr %len, align 1
  ret void
}
define void @foo-i64(ptr align 4 %p, i64 %v) {
; LE-LABEL: @foo-i64(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = trunc i64 [[V:%.*]] to i8
; LE-NEXT:    store i8 [[TMP0]], ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = lshr i64 [[V]], 8
; LE-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP1]] to i32
; LE-NEXT:    store i32 [[TMP3]], ptr [[TMP2]], align 4
; LE-NEXT:    [[TMP4:%.*]] = lshr i64 [[TMP1]], 32
; LE-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[TMP2]], i32 4
; LE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP4]] to i24
; LE-NEXT:    store i24 [[TMP6]], ptr [[TMP5]], align 4
; LE-NEXT:    ret void
;
; BE-LABEL: @foo-i64(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = lshr i64 [[V:%.*]], 56
; BE-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i8
; BE-NEXT:    store i8 [[TMP1]], ptr [[LEN]], align 1
; BE-NEXT:    [[TMP2:%.*]] = shl i64 [[V]], 8
; BE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP4:%.*]] = lshr i64 [[TMP2]], 32
; BE-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i32
; BE-NEXT:    store i32 [[TMP5]], ptr [[TMP3]], align 4
; BE-NEXT:    [[TMP6:%.*]] = shl i64 [[TMP2]], 32
; BE-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[TMP3]], i32 4
; BE-NEXT:    [[TMP8:%.*]] = lshr i64 [[TMP6]], 40
; BE-NEXT:    [[TMP9:%.*]] = trunc i64 [[TMP8]] to i24
; BE-NEXT:    store i24 [[TMP9]], ptr [[TMP7]], align 4
; BE-NEXT:    ret void
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  store i64 %v, ptr %len, align 1
  ret void
}

define void @foo-float(ptr align 4 %p, float %v) {
; LE-LABEL: @foo-float(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = bitcast float [[V:%.*]] to i32
; LE-NEXT:    [[TMP1:%.*]] = trunc i32 [[TMP0]] to i8
; LE-NEXT:    store i8 [[TMP1]], ptr [[LEN]], align 1
; LE-NEXT:    [[TMP2:%.*]] = lshr i32 [[TMP0]], 8
; LE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP4:%.*]] = trunc i32 [[TMP2]] to i24
; LE-NEXT:    store i24 [[TMP4]], ptr [[TMP3]], align 4
; LE-NEXT:    ret void
;
; BE-LABEL: @foo-float(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = bitcast float [[V:%.*]] to i32
; BE-NEXT:    [[TMP1:%.*]] = lshr i32 [[TMP0]], 24
; BE-NEXT:    [[TMP2:%.*]] = trunc i32 [[TMP1]] to i8
; BE-NEXT:    store i8 [[TMP2]], ptr [[LEN]], align 1
; BE-NEXT:    [[TMP3:%.*]] = shl i32 [[TMP0]], 8
; BE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP5:%.*]] = lshr i32 [[TMP3]], 8
; BE-NEXT:    [[TMP6:%.*]] = trunc i32 [[TMP5]] to i24
; BE-NEXT:    store i24 [[TMP6]], ptr [[TMP4]], align 4
; BE-NEXT:    ret void
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  store float %v, ptr %len, align 1
  ret void
}

define void @foo-double(ptr align 4 %p, double %v) {
; LE-LABEL: @foo-double(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = bitcast double [[V:%.*]] to i64
; LE-NEXT:    [[TMP1:%.*]] = trunc i64 [[TMP0]] to i8
; LE-NEXT:    store i8 [[TMP1]], ptr [[LEN]], align 1
; LE-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP0]], 8
; LE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP2]] to i32
; LE-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; LE-NEXT:    [[TMP5:%.*]] = lshr i64 [[TMP2]], 32
; LE-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[TMP3]], i32 4
; LE-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP5]] to i24
; LE-NEXT:    store i24 [[TMP7]], ptr [[TMP6]], align 4
; LE-NEXT:    ret void
;
; BE-LABEL: @foo-double(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = bitcast double [[V:%.*]] to i64
; BE-NEXT:    [[TMP1:%.*]] = lshr i64 [[TMP0]], 56
; BE-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i8
; BE-NEXT:    store i8 [[TMP2]], ptr [[LEN]], align 1
; BE-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP0]], 8
; BE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP5:%.*]] = lshr i64 [[TMP3]], 32
; BE-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i32
; BE-NEXT:    store i32 [[TMP6]], ptr [[TMP4]], align 4
; BE-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP3]], 32
; BE-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[TMP4]], i32 4
; BE-NEXT:    [[TMP9:%.*]] = lshr i64 [[TMP7]], 40
; BE-NEXT:    [[TMP10:%.*]] = trunc i64 [[TMP9]] to i24
; BE-NEXT:    store i24 [[TMP10]], ptr [[TMP8]], align 4
; BE-NEXT:    ret void
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  store double %v, ptr %len, align 1
  ret void
}

define i32 @foo-load-i32(ptr align 4 %p) {
; LE-LABEL: @foo-load-i32(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i32
; LE-NEXT:    [[TMP2:%.*]] = shl i32 [[TMP1]], 0
; LE-NEXT:    [[TMP3:%.*]] = or i32 0, [[TMP2]]
; LE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP5:%.*]] = load i24, ptr [[TMP4]], align 4
; LE-NEXT:    [[TMP6:%.*]] = zext i24 [[TMP5]] to i32
; LE-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 8
; LE-NEXT:    [[TMP8:%.*]] = or i32 [[TMP3]], [[TMP7]]
; LE-NEXT:    ret i32 [[TMP8]]
;
; BE-LABEL: @foo-load-i32(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; BE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i32
; BE-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP3:%.*]] = load i24, ptr [[TMP2]], align 4
; BE-NEXT:    [[TMP4:%.*]] = zext i24 [[TMP3]] to i32
; BE-NEXT:    ret i32 0
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  %v = load i32, ptr %len, align 1
  ret i32 %v
}
define i64 @foo-load-i64(ptr align 4 %p) {
; LE-LABEL: @foo-load-i64(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i64
; LE-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 0
; LE-NEXT:    [[TMP3:%.*]] = or i64 0, [[TMP2]]
; LE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; LE-NEXT:    [[TMP6:%.*]] = zext i32 [[TMP5]] to i64
; LE-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 8
; LE-NEXT:    [[TMP8:%.*]] = or i64 [[TMP3]], [[TMP7]]
; LE-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[TMP4]], i32 4
; LE-NEXT:    [[TMP10:%.*]] = load i24, ptr [[TMP9]], align 4
; LE-NEXT:    [[TMP11:%.*]] = zext i24 [[TMP10]] to i64
; LE-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP11]], 40
; LE-NEXT:    [[TMP13:%.*]] = or i64 [[TMP8]], [[TMP12]]
; LE-NEXT:    ret i64 [[TMP13]]
;
; BE-LABEL: @foo-load-i64(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; BE-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 4
; BE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[TMP1]], i32 4
; BE-NEXT:    [[TMP4:%.*]] = load i24, ptr [[TMP3]], align 4
; BE-NEXT:    ret i64 0
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  %v = load i64, ptr %len, align 1
  ret i64 %v
}

define float @foo-load-float(ptr align 4 %p) {
; LE-LABEL: @foo-load-float(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i32
; LE-NEXT:    [[TMP2:%.*]] = shl i32 [[TMP1]], 0
; LE-NEXT:    [[TMP3:%.*]] = or i32 0, [[TMP2]]
; LE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP5:%.*]] = load i24, ptr [[TMP4]], align 4
; LE-NEXT:    [[TMP6:%.*]] = zext i24 [[TMP5]] to i32
; LE-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP6]], 8
; LE-NEXT:    [[TMP8:%.*]] = or i32 [[TMP3]], [[TMP7]]
; LE-NEXT:    [[TMP9:%.*]] = bitcast i32 [[TMP8]] to float
; LE-NEXT:    ret float [[TMP9]]
;
; BE-LABEL: @foo-load-float(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; BE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i32
; BE-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP3:%.*]] = load i24, ptr [[TMP2]], align 4
; BE-NEXT:    [[TMP4:%.*]] = zext i24 [[TMP3]] to i32
; BE-NEXT:    ret float 0.000000e+00
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  %v = load float, ptr %len, align 1
  ret float %v
}

define double @foo-load-double(ptr align 4 %p) {
; LE-LABEL: @foo-load-double(
; LE-NEXT:  entry:
; LE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; LE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; LE-NEXT:    [[TMP1:%.*]] = zext i8 [[TMP0]] to i64
; LE-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP1]], 0
; LE-NEXT:    [[TMP3:%.*]] = or i64 0, [[TMP2]]
; LE-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; LE-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
; LE-NEXT:    [[TMP6:%.*]] = zext i32 [[TMP5]] to i64
; LE-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 8
; LE-NEXT:    [[TMP8:%.*]] = or i64 [[TMP3]], [[TMP7]]
; LE-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[TMP4]], i32 4
; LE-NEXT:    [[TMP10:%.*]] = load i24, ptr [[TMP9]], align 4
; LE-NEXT:    [[TMP11:%.*]] = zext i24 [[TMP10]] to i64
; LE-NEXT:    [[TMP12:%.*]] = shl i64 [[TMP11]], 40
; LE-NEXT:    [[TMP13:%.*]] = or i64 [[TMP8]], [[TMP12]]
; LE-NEXT:    [[TMP14:%.*]] = bitcast i64 [[TMP13]] to double
; LE-NEXT:    ret double [[TMP14]]
;
; BE-LABEL: @foo-load-double(
; BE-NEXT:  entry:
; BE-NEXT:    [[LEN:%.*]] = getelementptr inbounds nuw i8, ptr [[P:%.*]], i32 3
; BE-NEXT:    [[TMP0:%.*]] = load i8, ptr [[LEN]], align 1
; BE-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[LEN]], i32 1
; BE-NEXT:    [[TMP2:%.*]] = load i32, ptr [[TMP1]], align 4
; BE-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[TMP1]], i32 4
; BE-NEXT:    [[TMP4:%.*]] = load i24, ptr [[TMP3]], align 4
; BE-NEXT:    ret double 0.000000e+00
;
entry:
  %len = getelementptr inbounds nuw i8, ptr %p, i32 3
  %v = load double, ptr %len, align 1
  ret double %v
}
